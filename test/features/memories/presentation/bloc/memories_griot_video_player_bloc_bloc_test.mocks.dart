// Mocks generated by Mockito 5.4.2 from annotations
// in griot_app/test/features/memories/presentation/bloc/memories_griot_video_player_bloc_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i8;

import 'package:chewie/chewie.dart' as _i2;
import 'package:flutter/material.dart' as _i4;
import 'package:flutter/services.dart' as _i7;
import 'package:griot_app/core/services/griot_video_services.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:video_player/video_player.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChewieController_0 extends _i1.SmartFake
    implements _i2.ChewieController {
  _FakeChewieController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVideoPlayerController_1 extends _i1.SmartFake
    implements _i3.VideoPlayerController {
  _FakeVideoPlayerController_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_2 extends _i1.SmartFake implements Duration {
  _FakeDuration_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEdgeInsets_3 extends _i1.SmartFake implements _i4.EdgeInsets {
  _FakeEdgeInsets_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GriotVideoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGriotVideoService extends _i1.Mock implements _i5.GriotVideoService {
  MockGriotVideoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChewieController get chewieController => (super.noSuchMethod(
        Invocation.getter(#chewieController),
        returnValue: _FakeChewieController_0(
          this,
          Invocation.getter(#chewieController),
        ),
      ) as _i2.ChewieController);
  @override
  _i3.VideoPlayerController get videoPlayerController => (super.noSuchMethod(
        Invocation.getter(#videoPlayerController),
        returnValue: _FakeVideoPlayerController_1(
          this,
          Invocation.getter(#videoPlayerController),
        ),
      ) as _i3.VideoPlayerController);
  @override
  _i6.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ChewieController].
///
/// See the documentation for Mockito's code generation for more information.
class MockChewieController extends _i1.Mock implements _i2.ChewieController {
  MockChewieController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get showOptions => (super.noSuchMethod(
        Invocation.getter(#showOptions),
        returnValue: false,
      ) as bool);
  @override
  set subtitleBuilder(
          _i4.Widget Function(
            _i4.BuildContext,
            dynamic,
          )? _subtitleBuilder) =>
      super.noSuchMethod(
        Invocation.setter(
          #subtitleBuilder,
          _subtitleBuilder,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set subtitle(_i2.Subtitles? _subtitle) => super.noSuchMethod(
        Invocation.setter(
          #subtitle,
          _subtitle,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.VideoPlayerController get videoPlayerController => (super.noSuchMethod(
        Invocation.getter(#videoPlayerController),
        returnValue: _FakeVideoPlayerController_1(
          this,
          Invocation.getter(#videoPlayerController),
        ),
      ) as _i3.VideoPlayerController);
  @override
  bool get autoInitialize => (super.noSuchMethod(
        Invocation.getter(#autoInitialize),
        returnValue: false,
      ) as bool);
  @override
  bool get autoPlay => (super.noSuchMethod(
        Invocation.getter(#autoPlay),
        returnValue: false,
      ) as bool);
  @override
  bool get draggableProgressBar => (super.noSuchMethod(
        Invocation.getter(#draggableProgressBar),
        returnValue: false,
      ) as bool);
  @override
  bool get looping => (super.noSuchMethod(
        Invocation.getter(#looping),
        returnValue: false,
      ) as bool);
  @override
  bool get showControlsOnInitialize => (super.noSuchMethod(
        Invocation.getter(#showControlsOnInitialize),
        returnValue: false,
      ) as bool);
  @override
  bool get showControls => (super.noSuchMethod(
        Invocation.getter(#showControls),
        returnValue: false,
      ) as bool);
  @override
  bool get zoomAndPan => (super.noSuchMethod(
        Invocation.getter(#zoomAndPan),
        returnValue: false,
      ) as bool);
  @override
  double get maxScale => (super.noSuchMethod(
        Invocation.getter(#maxScale),
        returnValue: 0.0,
      ) as double);
  @override
  bool get fullScreenByDefault => (super.noSuchMethod(
        Invocation.getter(#fullScreenByDefault),
        returnValue: false,
      ) as bool);
  @override
  bool get allowedScreenSleep => (super.noSuchMethod(
        Invocation.getter(#allowedScreenSleep),
        returnValue: false,
      ) as bool);
  @override
  bool get isLive => (super.noSuchMethod(
        Invocation.getter(#isLive),
        returnValue: false,
      ) as bool);
  @override
  bool get allowFullScreen => (super.noSuchMethod(
        Invocation.getter(#allowFullScreen),
        returnValue: false,
      ) as bool);
  @override
  bool get allowMuting => (super.noSuchMethod(
        Invocation.getter(#allowMuting),
        returnValue: false,
      ) as bool);
  @override
  bool get allowPlaybackSpeedChanging => (super.noSuchMethod(
        Invocation.getter(#allowPlaybackSpeedChanging),
        returnValue: false,
      ) as bool);
  @override
  bool get useRootNavigator => (super.noSuchMethod(
        Invocation.getter(#useRootNavigator),
        returnValue: false,
      ) as bool);
  @override
  Duration get hideControlsTimer => (super.noSuchMethod(
        Invocation.getter(#hideControlsTimer),
        returnValue: _FakeDuration_2(
          this,
          Invocation.getter(#hideControlsTimer),
        ),
      ) as Duration);
  @override
  List<double> get playbackSpeeds => (super.noSuchMethod(
        Invocation.getter(#playbackSpeeds),
        returnValue: <double>[],
      ) as List<double>);
  @override
  List<_i7.SystemUiOverlay> get systemOverlaysAfterFullScreen =>
      (super.noSuchMethod(
        Invocation.getter(#systemOverlaysAfterFullScreen),
        returnValue: <_i7.SystemUiOverlay>[],
      ) as List<_i7.SystemUiOverlay>);
  @override
  List<_i7.DeviceOrientation> get deviceOrientationsAfterFullScreen =>
      (super.noSuchMethod(
        Invocation.getter(#deviceOrientationsAfterFullScreen),
        returnValue: <_i7.DeviceOrientation>[],
      ) as List<_i7.DeviceOrientation>);
  @override
  _i4.EdgeInsets get controlsSafeAreaMinimum => (super.noSuchMethod(
        Invocation.getter(#controlsSafeAreaMinimum),
        returnValue: _FakeEdgeInsets_3(
          this,
          Invocation.getter(#controlsSafeAreaMinimum),
        ),
      ) as _i4.EdgeInsets);
  @override
  bool get isFullScreen => (super.noSuchMethod(
        Invocation.getter(#isFullScreen),
        returnValue: false,
      ) as bool);
  @override
  bool get isPlaying => (super.noSuchMethod(
        Invocation.getter(#isPlaying),
        returnValue: false,
      ) as bool);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i2.ChewieController copyWith({
    _i3.VideoPlayerController? videoPlayerController,
    _i2.OptionsTranslation? optionsTranslation,
    double? aspectRatio,
    bool? autoInitialize,
    bool? autoPlay,
    bool? draggableProgressBar,
    Duration? startAt,
    bool? looping,
    bool? fullScreenByDefault,
    _i2.ChewieProgressColors? cupertinoProgressColors,
    _i2.ChewieProgressColors? materialProgressColors,
    _i4.Widget? placeholder,
    _i4.Widget? overlay,
    bool? showControlsOnInitialize,
    bool? showOptions,
    _i6.Future<void> Function(
      _i4.BuildContext,
      List<_i2.OptionItem>,
    )? optionsBuilder,
    List<_i2.OptionItem> Function(_i4.BuildContext)? additionalOptions,
    bool? showControls,
    _i4.TransformationController? transformationController,
    bool? zoomAndPan,
    double? maxScale,
    _i2.Subtitles? subtitle,
    _i4.Widget Function(
      _i4.BuildContext,
      dynamic,
    )? subtitleBuilder,
    _i4.Widget? customControls,
    _i4.Widget Function(
      _i4.BuildContext,
      String,
    )? errorBuilder,
    bool? allowedScreenSleep,
    bool? isLive,
    bool? allowFullScreen,
    bool? allowMuting,
    bool? allowPlaybackSpeedChanging,
    bool? useRootNavigator,
    Duration? hideControlsTimer,
    _i4.EdgeInsets? controlsSafeAreaMinimum,
    List<double>? playbackSpeeds,
    List<_i7.SystemUiOverlay>? systemOverlaysOnEnterFullScreen,
    List<_i7.DeviceOrientation>? deviceOrientationsOnEnterFullScreen,
    List<_i7.SystemUiOverlay>? systemOverlaysAfterFullScreen,
    List<_i7.DeviceOrientation>? deviceOrientationsAfterFullScreen,
    Duration? progressIndicatorDelay,
    _i4.Widget Function(
      _i4.BuildContext,
      _i4.Animation<double>,
      _i4.Animation<double>,
      _i2.ChewieControllerProvider,
    )? routePageBuilder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #videoPlayerController: videoPlayerController,
            #optionsTranslation: optionsTranslation,
            #aspectRatio: aspectRatio,
            #autoInitialize: autoInitialize,
            #autoPlay: autoPlay,
            #draggableProgressBar: draggableProgressBar,
            #startAt: startAt,
            #looping: looping,
            #fullScreenByDefault: fullScreenByDefault,
            #cupertinoProgressColors: cupertinoProgressColors,
            #materialProgressColors: materialProgressColors,
            #placeholder: placeholder,
            #overlay: overlay,
            #showControlsOnInitialize: showControlsOnInitialize,
            #showOptions: showOptions,
            #optionsBuilder: optionsBuilder,
            #additionalOptions: additionalOptions,
            #showControls: showControls,
            #transformationController: transformationController,
            #zoomAndPan: zoomAndPan,
            #maxScale: maxScale,
            #subtitle: subtitle,
            #subtitleBuilder: subtitleBuilder,
            #customControls: customControls,
            #errorBuilder: errorBuilder,
            #allowedScreenSleep: allowedScreenSleep,
            #isLive: isLive,
            #allowFullScreen: allowFullScreen,
            #allowMuting: allowMuting,
            #allowPlaybackSpeedChanging: allowPlaybackSpeedChanging,
            #useRootNavigator: useRootNavigator,
            #hideControlsTimer: hideControlsTimer,
            #controlsSafeAreaMinimum: controlsSafeAreaMinimum,
            #playbackSpeeds: playbackSpeeds,
            #systemOverlaysOnEnterFullScreen: systemOverlaysOnEnterFullScreen,
            #deviceOrientationsOnEnterFullScreen:
                deviceOrientationsOnEnterFullScreen,
            #systemOverlaysAfterFullScreen: systemOverlaysAfterFullScreen,
            #deviceOrientationsAfterFullScreen:
                deviceOrientationsAfterFullScreen,
            #progressIndicatorDelay: progressIndicatorDelay,
            #routePageBuilder: routePageBuilder,
          },
        ),
        returnValue: _FakeChewieController_0(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #videoPlayerController: videoPlayerController,
              #optionsTranslation: optionsTranslation,
              #aspectRatio: aspectRatio,
              #autoInitialize: autoInitialize,
              #autoPlay: autoPlay,
              #draggableProgressBar: draggableProgressBar,
              #startAt: startAt,
              #looping: looping,
              #fullScreenByDefault: fullScreenByDefault,
              #cupertinoProgressColors: cupertinoProgressColors,
              #materialProgressColors: materialProgressColors,
              #placeholder: placeholder,
              #overlay: overlay,
              #showControlsOnInitialize: showControlsOnInitialize,
              #showOptions: showOptions,
              #optionsBuilder: optionsBuilder,
              #additionalOptions: additionalOptions,
              #showControls: showControls,
              #transformationController: transformationController,
              #zoomAndPan: zoomAndPan,
              #maxScale: maxScale,
              #subtitle: subtitle,
              #subtitleBuilder: subtitleBuilder,
              #customControls: customControls,
              #errorBuilder: errorBuilder,
              #allowedScreenSleep: allowedScreenSleep,
              #isLive: isLive,
              #allowFullScreen: allowFullScreen,
              #allowMuting: allowMuting,
              #allowPlaybackSpeedChanging: allowPlaybackSpeedChanging,
              #useRootNavigator: useRootNavigator,
              #hideControlsTimer: hideControlsTimer,
              #controlsSafeAreaMinimum: controlsSafeAreaMinimum,
              #playbackSpeeds: playbackSpeeds,
              #systemOverlaysOnEnterFullScreen: systemOverlaysOnEnterFullScreen,
              #deviceOrientationsOnEnterFullScreen:
                  deviceOrientationsOnEnterFullScreen,
              #systemOverlaysAfterFullScreen: systemOverlaysAfterFullScreen,
              #deviceOrientationsAfterFullScreen:
                  deviceOrientationsAfterFullScreen,
              #progressIndicatorDelay: progressIndicatorDelay,
              #routePageBuilder: routePageBuilder,
            },
          ),
        ),
      ) as _i2.ChewieController);
  @override
  void enterFullScreen() => super.noSuchMethod(
        Invocation.method(
          #enterFullScreen,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void exitFullScreen() => super.noSuchMethod(
        Invocation.method(
          #exitFullScreen,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void toggleFullScreen() => super.noSuchMethod(
        Invocation.method(
          #toggleFullScreen,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void togglePause() => super.noSuchMethod(
        Invocation.method(
          #togglePause,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> play() => (super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> setLooping(bool? looping) => (super.noSuchMethod(
        Invocation.method(
          #setLooping,
          [looping],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> seekTo(Duration? moment) => (super.noSuchMethod(
        Invocation.method(
          #seekTo,
          [moment],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> setVolume(double? volume) => (super.noSuchMethod(
        Invocation.method(
          #setVolume,
          [volume],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void setSubtitle(List<_i2.Subtitle>? newSubtitle) => super.noSuchMethod(
        Invocation.method(
          #setSubtitle,
          [newSubtitle],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
