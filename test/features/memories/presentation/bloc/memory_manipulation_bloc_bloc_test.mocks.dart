// Mocks generated by Mockito 5.4.1 from annotations
// in griot_app/test/features/memories/presentation/bloc/memory_manipulation_bloc_bloc_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:griot_app/core/data/main_account_id_provider.dart' as _i4;
import 'package:griot_app/core/error/failures.dart' as _i7;
import 'package:griot_app/memories/domain/entities/memory.dart' as _i8;
import 'package:griot_app/memories/domain/repositories/memories_repository.dart'
    as _i2;
import 'package:griot_app/memories/domain/usecases/add_video_from_library_to_memory_usecase.dart'
    as _i9;
import 'package:griot_app/memories/domain/usecases/add_video_list_from_library_to_draft_memory_usecase.dart'
    as _i11;
import 'package:griot_app/memories/domain/usecases/commit_changes_to_memory_usecase.dart'
    as _i12;
import 'package:griot_app/memories/domain/usecases/create_memory_usecase.dart'
    as _i6;
import 'package:griot_app/memories/domain/usecases/get_memory_details_usecase.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMemoriesRepository_0 extends _i1.SmartFake
    implements _i2.MemoriesRepository {
  _FakeMemoriesRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MainAccountIdProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockMainAccountIdProvider extends _i1.Mock
    implements _i4.MainAccountIdProvider {
  MockMainAccountIdProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<int> getMainAccountId() => (super.noSuchMethod(
        Invocation.method(
          #getMainAccountId,
          [],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
}

/// A class which mocks [CreateMemoriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateMemoriesUseCase extends _i1.Mock
    implements _i6.CreateMemoriesUseCase {
  MockCreateMemoriesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MemoriesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMemoriesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MemoriesRepository);
  @override
  _i5.Future<_i3.Either<_i7.Failure, _i8.Memory>> call(_i6.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i7.Failure, _i8.Memory>>.value(
            _FakeEither_1<_i7.Failure, _i8.Memory>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i7.Failure, _i8.Memory>>);
}

/// A class which mocks [AddVideoFromLibraryToMemoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddVideoFromLibraryToMemoryUseCase extends _i1.Mock
    implements _i9.AddVideoFromLibraryToMemoryUseCase {
  MockAddVideoFromLibraryToMemoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MemoriesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMemoriesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MemoriesRepository);
  @override
  _i5.Future<_i3.Either<_i7.Failure, _i8.Memory>> call(_i9.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i7.Failure, _i8.Memory>>.value(
            _FakeEither_1<_i7.Failure, _i8.Memory>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i7.Failure, _i8.Memory>>);
}

/// A class which mocks [GetMemoriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMemoriesUseCase extends _i1.Mock
    implements _i10.GetMemoriesUseCase {
  MockGetMemoriesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MemoriesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMemoriesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MemoriesRepository);
  @override
  _i5.Future<_i3.Either<_i7.Failure, _i8.Memory>> call(_i10.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i7.Failure, _i8.Memory>>.value(
            _FakeEither_1<_i7.Failure, _i8.Memory>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i7.Failure, _i8.Memory>>);
}

/// A class which mocks [AddVideoListFromLibraryToDraftMemoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddVideoListFromLibraryToDraftMemoryUseCase extends _i1.Mock
    implements _i11.AddVideoListFromLibraryToDraftMemoryUseCase {
  MockAddVideoListFromLibraryToDraftMemoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MemoriesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMemoriesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MemoriesRepository);
  @override
  _i5.Future<_i3.Either<_i7.Failure, _i8.Memory>> call(_i11.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i7.Failure, _i8.Memory>>.value(
            _FakeEither_1<_i7.Failure, _i8.Memory>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i7.Failure, _i8.Memory>>);
}

/// A class which mocks [CommitChangesToMemoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommitChangesToMemoryUseCase extends _i1.Mock
    implements _i12.CommitChangesToMemoryUseCase {
  MockCommitChangesToMemoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MemoriesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMemoriesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MemoriesRepository);
  @override
  _i5.Future<_i3.Either<_i7.Failure, _i8.Memory>> call(_i12.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i7.Failure, _i8.Memory>>.value(
            _FakeEither_1<_i7.Failure, _i8.Memory>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i7.Failure, _i8.Memory>>);
}
